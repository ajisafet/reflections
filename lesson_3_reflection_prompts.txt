When would you want to use a remote repository rather than keeping all your work
local?

    I would use a remote repository when collaborating with others on a project.
    It would be beneficial to use a remote repository as backup for your local repo.
    Finally, it is a good way to have access to your code without having to carry around a hard drive or laptop enabling you to work anywhere if you do have access to a computer. i.e. a Raspberry Pi

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

   This is particularly important when working with a team on the same repository.
   Changes introduced by other users could break your code if Git automatically pulls changes for the remote repo.
   Also, pulling changes manually puts you in charge of resolving any conflicts that may occur. 

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

   Forks - This is a clone of a remote repository that is created on Github's servers. Forks include all branches in the repo.
   Clones - This is a clone of a repository (remote or local) that is created on your local computer. Clones include all branches in the repo.
   Branches - This is a deviation that allows you to write different versions of contents without any one overriding the other.
	      You can't clone a branch.

What is the benefit of having a copy of the last known state of the remote
stored locally?

   This helps you to keep a local copy of the remote repo when you are not online or won't have remote access to the remote respo.
   Also this helps to keep track of differences between your local repo and the remote repo when you are not online.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Fill in your answer here

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?
Changes in sepasrate branch
To prevent frequent conflicts when collaborating with others.
To complete a new/experimental feature which is not ready for release.

Changes in master
Easier when working solo on a project.
